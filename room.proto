syntax = "proto3";

option go_package = "pkg/rooms/pb";

// All protocol buffers related to the room.

service RoomService {
    rpc Signal(stream SignalRequest) returns (stream SignalReply);
}

message SignalRequest {
    message Command {
        enum Type {
            ADD_SPEAKER = 0;
            REMOVE_SPEAKER = 1;
            MUTE_SPEAKER = 2;
            UNMUTE_SPEAKER = 3;
            REACTION = 4;
        }

        Type type = 1;
        bytes data = 2;
    }

    oneof payload {
        JoinRequest join = 1;
        CreateRequest create = 2;
        SessionDescription negotiate = 3;
        Trickle trickle = 4;
        Command command = 5;
    }
}

message SignalReply {

    message Event {
        enum Type {
            JOINED = 0;
            LEFT = 1;
            ADDED_SPEAKER = 2;
            REMOVED_SPEAKER = 3;
            CHANGED_OWNER = 4;
            MUTED_SPEAKER = 5;
            UNMUTED_SPEAKER = 6;
            REACTED = 7;
        }

        Type type = 1;
        int64 from = 2;
        bytes data = 3;
    }

    oneof payload {
        JoinReply join = 1;
        CreateReply create = 2;
        SessionDescription negotiate = 3;
        Trickle trickle = 4;
        Event event = 5;
    }
}

message JoinRequest {
    int64 room = 1;
    string session = 2;
}

message JoinReply {
//    string pid = 1;
    SessionDescription answer = 2;
}

message CreateRequest {
    string name = 1;
}

message CreateReply {
    int64 id = 1;
    SessionDescription answer = 2;
}

message Trickle {
    string init = 1;
}

message SessionDescription {
    string type = 1; // "answer" | "offer" | "pranswer" | "rollback"
    bytes sdp = 2;
}
